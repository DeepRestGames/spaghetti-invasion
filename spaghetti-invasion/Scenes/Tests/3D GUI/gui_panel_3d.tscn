[gd_scene load_steps=7 format=3 uid="uid://dvl383ispakmn"]

[ext_resource type="Texture2D" uid="uid://bti2qjioevvhr" path="res://icon.svg" id="2"]

[sub_resource type="GDScript" id="GDScript_188bq"]
script/source = "extends Node3D

# Used for checking if the mouse is inside the Area3D.
var is_mouse_inside = false
# The last processed input touch/mouse event. To calculate relative movement.
var last_event_pos2D = null
# The time of the last event in seconds since engine start.
var last_event_time: float = -1.0

@onready var node_viewport = $SubViewport
@onready var node_quad = $Quad
@onready var node_area = $Quad/Area3D

func _ready():
	node_area.mouse_entered.connect(_mouse_entered_area)
	node_area.mouse_exited.connect(_mouse_exited_area)
	node_area.input_event.connect(_mouse_input_event)

	# If the material is NOT set to use billboard settings, then avoid running billboard specific code
	if node_quad.get_surface_override_material(0).billboard_mode == BaseMaterial3D.BillboardMode.BILLBOARD_DISABLED:
		set_process(false)


func _mouse_entered_area():
	is_mouse_inside = true
	
	print(\"MOUSE INSIDE\")


func _mouse_exited_area():
	is_mouse_inside = false
	
	print(\"MOUSE EXIT\")


func _unhandled_input(event):
	# Check if the event is a non-mouse/non-touch event
	for mouse_event in [InputEventMouseButton, InputEventMouseMotion, InputEventScreenDrag, InputEventScreenTouch]:
		if is_instance_of(event, mouse_event):
			# If the event is a mouse/touch event, then we can ignore it here, because it will be
			# handled via Physics Picking.
			return
	node_viewport.push_input(event)


func _mouse_input_event(_camera: Camera3D, event: InputEvent, event_position: Vector3, _normal: Vector3, _shape_idx: int):
	# Get mesh size to detect edges and make conversions. This code only support PlaneMesh and QuadMesh.
	var quad_mesh_size = node_quad.mesh.size

	# Event position in Area3D in world coordinate space.
	var event_pos3D = event_position

	# Current time in seconds since engine start.
	var now: float = Time.get_ticks_msec() / 1000.0

	# Convert position to a coordinate space relative to the Area3D node.
	# NOTE: affine_inverse accounts for the Area3D node's scale, rotation, and position in the scene!
	event_pos3D = node_quad.global_transform.affine_inverse() * event_pos3D

	# TODO: Adapt to bilboard mode or avoid completely.

	var event_pos2D: Vector2 = Vector2()

	if is_mouse_inside:
		# Convert the relative event position from 3D to 2D.
		event_pos2D = Vector2(event_pos3D.x, -event_pos3D.y)

		# Right now the event position's range is the following: (-quad_size/2) -> (quad_size/2)
		# We need to convert it into the following range: -0.5 -> 0.5
		event_pos2D.x = event_pos2D.x / quad_mesh_size.x
		event_pos2D.y = event_pos2D.y / quad_mesh_size.y
		# Then we need to convert it into the following range: 0 -> 1
		event_pos2D.x += 0.5
		event_pos2D.y += 0.5

		# Finally, we convert the position to the following range: 0 -> viewport.size
		event_pos2D.x *= node_viewport.size.x
		event_pos2D.y *= node_viewport.size.y
		# We need to do these conversions so the event's position is in the viewport's coordinate system.

	elif last_event_pos2D != null:
		# Fall back to the last known event position.
		event_pos2D = last_event_pos2D

	# Set the event's position and global position.
	event.position = event_pos2D
	if event is InputEventMouse:
		event.global_position = event_pos2D

	# Calculate the relative event distance.
	if event is InputEventMouseMotion or event is InputEventScreenDrag:
		# If there is not a stored previous position, then we'll assume there is no relative motion.
		if last_event_pos2D == null:
			event.relative = Vector2(0, 0)
		# If there is a stored previous position, then we'll calculate the relative position by subtracting
		# the previous position from the new position. This will give us the distance the event traveled from prev_pos.
		else:
			event.relative = event_pos2D - last_event_pos2D
			event.velocity = event.relative / (now - last_event_time)

	# Update last_event_pos2D with the position we just calculated.
	last_event_pos2D = event_pos2D

	# Update last_event_time to current time.
	last_event_time = now

	# Finally, send the processed input event to the viewport.
	node_viewport.push_input(event)
"

[sub_resource type="QuadMesh" id="1"]
size = Vector2(3, 2)

[sub_resource type="ViewportTexture" id="2"]
viewport_path = NodePath("SubViewport")

[sub_resource type="StandardMaterial3D" id="3"]
resource_local_to_scene = true
transparency = 1
shading_mode = 0
albedo_texture = SubResource("2")

[sub_resource type="BoxShape3D" id="4"]
size = Vector3(3, 2, 0.1)

[node name="GUIPanel3D" type="Node3D"]
process_mode = 3
script = SubResource("GDScript_188bq")

[node name="SubViewport" type="SubViewport" parent="."]
gui_embed_subwindows = true
size = Vector2i(571, 369)
render_target_update_mode = 4

[node name="GUI" type="Control" parent="SubViewport"]
layout_mode = 3
anchors_preset = 0
offset_right = 560.0
offset_bottom = 360.0
mouse_filter = 1

[node name="Panel" type="Panel" parent="SubViewport/GUI"]
layout_mode = 0
anchor_right = 1.0
anchor_bottom = 1.0

[node name="VBoxContainer" type="VBoxContainer" parent="SubViewport/GUI/Panel"]
layout_mode = 1
anchors_preset = 9
anchor_bottom = 1.0
offset_left = 20.0
offset_top = 20.0
offset_right = 319.0
offset_bottom = -20.0
grow_vertical = 2
theme_override_constants/separation = 13

[node name="Label" type="Label" parent="SubViewport/GUI/Panel/VBoxContainer"]
layout_mode = 2
text = "Hello world!"
horizontal_alignment = 1

[node name="Button" type="Button" parent="SubViewport/GUI/Panel/VBoxContainer"]
layout_mode = 2
text = "A button!"

[node name="TextEdit" type="LineEdit" parent="SubViewport/GUI/Panel/VBoxContainer"]
layout_mode = 2

[node name="HSlider" type="HSlider" parent="SubViewport/GUI/Panel/VBoxContainer"]
layout_mode = 2
step = 0.0
ticks_on_borders = true

[node name="ColorRect" type="ColorRect" parent="SubViewport/GUI/Panel"]
layout_mode = 1
anchors_preset = 1
anchor_left = 1.0
anchor_right = 1.0
offset_left = -182.0
offset_top = 16.0
offset_right = -54.0
offset_bottom = 144.0
grow_horizontal = 0
color = Color(1, 0, 0, 1)

[node name="TextureRect" type="TextureRect" parent="SubViewport/GUI/Panel"]
layout_mode = 1
anchors_preset = 1
anchor_left = 1.0
anchor_right = 1.0
offset_left = -166.0
offset_top = 32.0
offset_right = -70.0
offset_bottom = 128.0
grow_horizontal = 0
texture = ExtResource("2")
expand_mode = 1

[node name="VSlider" type="VSlider" parent="SubViewport/GUI/Panel"]
layout_mode = 1
anchors_preset = 11
anchor_left = 1.0
anchor_right = 1.0
anchor_bottom = 1.0
offset_left = -37.0
offset_top = 16.0
offset_right = -5.0
offset_bottom = -16.0
grow_horizontal = 0
grow_vertical = 2
step = 0.0

[node name="OptionButton" type="OptionButton" parent="SubViewport/GUI/Panel"]
layout_mode = 1
anchors_preset = 3
anchor_left = 1.0
anchor_top = 1.0
anchor_right = 1.0
anchor_bottom = 1.0
offset_left = -227.0
offset_top = -208.0
offset_right = -39.0
offset_bottom = -147.0
grow_horizontal = 0
grow_vertical = 0
item_count = 3
popup/item_0/text = "Item 0"
popup/item_0/id = 0
popup/item_1/text = "Item 1"
popup/item_1/id = 1
popup/item_2/text = "Item 2"
popup/item_2/id = 2

[node name="Quad" type="MeshInstance3D" parent="."]
mesh = SubResource("1")
surface_material_override/0 = SubResource("3")

[node name="Area3D" type="Area3D" parent="Quad"]
collision_layer = 2
input_capture_on_drag = true

[node name="CollisionShape3D" type="CollisionShape3D" parent="Quad/Area3D"]
shape = SubResource("4")
